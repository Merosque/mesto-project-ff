{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["// Найдём все попапы для закрытия по клику на оверлей или на крестик\r\nconst popups = document.querySelectorAll('.popup');\r\n\r\n// Функция открытия попапа \r\nfunction openPopup(popup) {\r\n  popup.classList.add('popup_is-opened');\r\n  document.addEventListener('keydown', handleEscClose);\r\n}\r\n\r\n// Функция закрытия попапа \r\nfunction closePopup(popup) {\r\n  popup.classList.remove('popup_is-opened');\r\n  document.removeEventListener('keydown', handleEscClose);\r\n}\r\n\r\n// Закрытие попапа по клавише Escape \r\nfunction handleEscClose(evt) {\r\n  if (evt.key === 'Escape') {\r\n    const openedPopup = document.querySelector('.popup_is-opened');\r\n    if (openedPopup) {\r\n      closePopup(openedPopup);\r\n    }\r\n  }\r\n}\r\n\r\n// Закрытие попапа по клику на крестик \r\npopups.forEach((popup) => {\r\n  const closeButton = popup.querySelector('.popup__close');\r\n  if (closeButton) {\r\n    closeButton.addEventListener('click', () => closePopup(popup));\r\n  }\r\n});\r\n\r\nexport { closePopup, openPopup, popups };","//Настройки авторизации на сервере\r\nconst config = {\r\n  baseUrl: 'https://mesto.nomoreparties.co/v1/wff-cohort-38',\r\n  headers: {\r\n    authorization: 'a4a20277-d736-49ce-b949-832b12debea2',\r\n    'Content-Type': 'application/json'\r\n  }\r\n};\r\n\r\n// Универсальный обработчик ответа\r\nfunction handleResponse(res) {\r\n  if (res.ok) {\r\n    return res.json();\r\n  }\r\n  return Promise.reject(`Ошибка: ${res.status}`);\r\n}\r\n\r\n// Получить информацию о пользователе\r\nexport function getUserInfo() {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    headers: config.headers\r\n  }).then(handleResponse);\r\n}\r\n\r\n// Получить все карточки\r\nexport function getInitialCards() {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    headers: config.headers\r\n  }).then(handleResponse);\r\n}\r\n\r\n//обновить данные пользователя\r\nexport const updateUserInfo = (name, about) => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: 'PATCH',\r\n    headers: config.headers,\r\n    body: JSON.stringify({ name, about })\r\n  })\r\n  .then(res => {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    return Promise.reject(`Ошибка: ${res.status}`);\r\n  });\r\n};\r\n\r\n//Добавить новую карточку на сервер\r\nexport const addNewCard = (name, link) => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: 'POST',\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name: name,\r\n      link: link\r\n    })\r\n  })\r\n    .then(res => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      return Promise.reject(`Ошибка: ${res.status}`);\r\n    });\r\n};\r\n\r\n//PUT-запрос для добавления лайка\r\nexport const putLike = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: 'PUT',\r\n    headers: config.headers,\r\n  })\r\n    .then(res => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      return Promise.reject(`Ошибка: ${res.status}`);\r\n    });\r\n};\r\n\r\n//DELETE-запрос для удаления лайка\r\nexport const deleteLike = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: 'DELETE',\r\n    headers: config.headers,\r\n  })\r\n    .then(res => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      return Promise.reject(`Ошибка: ${res.status}`);\r\n    });\r\n};\r\n\r\n//запрос удаления карточки на сервер\r\nexport const deleteCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/${cardId}`, {\r\n    method: 'DELETE',\r\n    headers: config.headers,\r\n  })\r\n    .then(res => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      return Promise.reject(`Ошибка: ${res.status}`);\r\n    });\r\n};\r\n\r\n//обновление аватарки\r\nexport const updateAvatar = (avatarUrl) => {\r\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n    method: 'PATCH',\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      avatar: avatarUrl\r\n    })\r\n  })\r\n  .then(res => {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    return Promise.reject(`Ошибка: ${res.status}`);\r\n  });\r\n};\r\n","import { openPopup } from './modal.js';\r\nimport { putLike, deleteLike, deleteCard } from './api.js';  // Импортируем функции для работы с лайками\r\n\r\nconst cardTemplate = document.querySelector('#card-template').content;\r\nconst imagePopup = document.querySelector('.popup_type_image');\r\nconst popupImage = imagePopup.querySelector('.popup__image');\r\nconst popupCaption = imagePopup.querySelector('.popup__caption');\r\n\r\n// Функция удаления карточки\r\nfunction handleDeleteCard(evt, cardId) {\r\n  const eventTarget = evt.target;\r\n  eventTarget.closest('.places__item').remove();\r\n\r\n   // Отправляем запрос на удаление карточки с сервера\r\n   deleteCard(cardId)\r\n   .then((data) => {\r\n     console.log('Карточка удалена с сервера:', data);\r\n   })\r\n   .catch((error) => {\r\n     console.error('Ошибка при удалении карточки:', error);\r\n   });\r\n}\r\n\r\n// Функция копирования клонированного шаблона карточки\r\nfunction getCardTemplate() {\r\n  return cardTemplate.querySelector('.places__item').cloneNode(true);\r\n}\r\n\r\n//Функция лайка карточки\r\nfunction handleLikeClick(element, likeButton, likeCounter) {\r\n  // Если лайкнут — убираем лайк, иначе ставим лайк\r\n  if (likeButton.classList.contains('card__like-button_is-active')) {\r\n    // Убираем лайк\r\n    deleteLike(element._id)\r\n      .then((updatedCard) => {\r\n        likeButton.classList.remove('card__like-button_is-active');\r\n        likeCounter.textContent = updatedCard.likes.length;\r\n      })\r\n      .catch((error) => console.error('Ошибка при снятии лайка:', error));\r\n  } else {\r\n    // Ставим лайк\r\n    putLike(element._id)\r\n      .then((updatedCard) => {\r\n        likeButton.classList.add('card__like-button_is-active');\r\n        likeCounter.textContent = updatedCard.likes.length;\r\n      })\r\n      .catch((error) => console.error('Ошибка при добавлении лайка:', error));\r\n  }\r\n}\r\n\r\n// Функция открытия попапа изображения по клику на изображение карточки\r\nfunction handleImageClick(element) {\r\n  popupImage.src = element.link;\r\n  popupImage.alt = element.alt;\r\n  popupCaption.textContent = element.alt;\r\n  openPopup(imagePopup);\r\n}\r\n\r\n// Функция создания карточки\r\nfunction createCard(element, handleLikeClick, handleDeleteCard, handleImageClick) {\r\n  const cardElement = getCardTemplate();\r\n  const cardImage = cardElement.querySelector('.card__image');\r\n  const cardTitle = cardElement.querySelector('.card__title');\r\n  const deleteButton = cardElement.querySelector('.card__delete-button');\r\n  const likeButton = cardElement.querySelector('.card__like-button');\r\n  const likeCounter = cardElement.querySelector('.card__like-counter');\r\n\r\n  cardImage.src = element.link;\r\n  cardImage.alt = element.alt;\r\n  cardTitle.textContent = element.name;\r\n\r\n    // Отображаем количество лайков\r\n    likeCounter.textContent = element.likes ? element.likes.length : 0;\r\n  \r\n// Подсветка лайка, если пользователь уже лайкал\r\nif (element.likes && element.currentUserId) {\r\n  const isLiked = element.likes.some(like => like._id === element.currentUserId);\r\n  if (isLiked) {\r\n    likeButton.classList.add('card__like-button_is-active');\r\n  }\r\n}\r\n\r\n// Скрываем кнопку удаления, если карточка не принадлежит текущему пользователю\r\nif (element.owner._id !== element.currentUserId) {\r\n  deleteButton.style.display = 'none';\r\n} else {\r\n  // Если это моя карточка, прикрепляем обработчик удаления\r\n  deleteButton.addEventListener('click', (evt) => handleDeleteCard(evt, element._id));\r\n}\r\n\r\n  cardImage.addEventListener('click', () => handleImageClick(element));\r\n  likeButton.addEventListener('click', () => handleLikeClick(element, likeButton, likeCounter));\r\n\r\n  return cardElement;\r\n}\r\n\r\nexport { createCard, handleLikeClick, handleDeleteCard, handleImageClick };\r\n","function showInputError(formElement, inputElement, errorMessage, settings) {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.add(settings.inputErrorClass);\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(settings.errorClass);\r\n}\r\n\r\nfunction hideInputError(formElement, inputElement, settings) {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.remove(settings.inputErrorClass);\r\n  errorElement.textContent = '';\r\n  errorElement.classList.remove(settings.errorClass);\r\n}\r\n\r\nfunction checkInputValidity(formElement, inputElement, settings) {\r\n  const customError = inputElement.dataset.errorMessage;\r\n\r\n  if (!inputElement.validity.valid) {\r\n    if (inputElement.validity.patternMismatch && customError) {\r\n      showInputError(formElement, inputElement, customError, settings);\r\n    } else {\r\n      showInputError(formElement, inputElement, inputElement.validationMessage, settings);\r\n    }\r\n  } else {\r\n    hideInputError(formElement, inputElement, settings);\r\n  }\r\n}\r\n\r\nfunction toggleButtonState(inputs, button, settings) {\r\n  const hasInvalidInput = inputs.some((inputElement) => !inputElement.validity.valid);\r\n  if (hasInvalidInput) {\r\n    button.classList.add(settings.inactiveButtonClass);\r\n    button.disabled = true;\r\n  } else {\r\n    button.classList.remove(settings.inactiveButtonClass);\r\n    button.disabled = false;\r\n  }\r\n}\r\n\r\nfunction setEventListeners(formElement, settings) {\r\n  const inputList = Array.from(formElement.querySelectorAll(settings.inputSelector));\r\n  const buttonElement = formElement.querySelector(settings.submitButtonSelector);\r\n\r\n  toggleButtonState(inputList, buttonElement, settings);\r\n\r\n  inputList.forEach((inputElement) => {\r\n    inputElement.addEventListener('input', () => {\r\n      checkInputValidity(formElement, inputElement, settings);\r\n      toggleButtonState(inputList, buttonElement, settings);\r\n    });\r\n  });\r\n}\r\n\r\nexport function enableValidation(settings) {\r\n  const formList = Array.from(document.querySelectorAll(settings.formSelector));\r\n  formList.forEach((formElement) => {\r\n    setEventListeners(formElement, settings);\r\n  });\r\n}\r\n\r\nexport function clearValidation(formElement, settings) {\r\n  const inputList = Array.from(formElement.querySelectorAll(settings.inputSelector));\r\n  const buttonElement = formElement.querySelector(settings.submitButtonSelector);\r\n\r\n  inputList.forEach((inputElement) => {\r\n    hideInputError(formElement, inputElement, settings);\r\n  });\r\n\r\n  toggleButtonState(inputList, buttonElement, settings);\r\n}\r\n","import './pages/index.css';\r\nimport { closePopup, openPopup, popups } from \"./components/modal.js\";\r\nimport { createCard, handleLikeClick, handleDeleteCard, handleImageClick } from './components/card.js'; // импорт логики карточек\r\nimport { getUserInfo, getInitialCards, updateUserInfo, addNewCard, updateAvatar } from './components/api.js'; // импорт API-функций\r\nimport { enableValidation, clearValidation } from './components/validation.js';\r\n\r\n//значения имени и занятия по дефолту в профиле\r\nconst profileName = document.querySelector(\".profile__title\");\r\nconst profileDescription = document.querySelector(\".profile__description\");\r\nconst profileAvatar = document.querySelector(\".profile__image\"); // для отображения аватара\r\n\r\n//кнопки\r\nconst editButton = document.querySelector('.profile__edit-button');\r\nconst editPopup = document.querySelector('.popup_type_edit');\r\nconst newCardPopup = document.querySelector('.popup_type_new-card');\r\nconst addCardButton = document.querySelector('.profile__add-button');\r\n\r\n//DOM элемент списка мест\r\nlet placesList = document.querySelector('.places__list');\r\n\r\n// Функция добавления карточки в начало\r\nfunction renderCard(dataAboutPlace) {\r\n  const readyCard = createCard(dataAboutPlace, handleLikeClick, handleDeleteCard, handleImageClick);\r\n  placesList.prepend(readyCard); // Добавляем в начало\r\n}\r\n\r\n// Загрузка информации о пользователе и карточек с сервера\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  // Загружаем данные о пользователе и карточки параллельно с использованием Promise.all\r\n  Promise.all([getUserInfo(), getInitialCards()])\r\n    .then(([userData, cards]) => {\r\n      // Обновляем DOM с полученными данными о пользователе\r\n      profileName.textContent = userData.name;\r\n      profileDescription.textContent = userData.about;\r\n      profileAvatar.style.backgroundImage = `url(${userData.avatar})`;\r\n      profileName.dataset.userId = userData._id; \r\n\r\n      // Отображаем карточки\r\n        cards.forEach((cardData) => {\r\n        // Передаем currentUserId в данные карточки\r\n          cardData.currentUserId = userData._id; // Добавляем currentUserId\r\n\r\n          const cardElement = createCard(cardData, handleLikeClick, handleDeleteCard, handleImageClick);\r\n          placesList.appendChild(cardElement);\r\n        });\r\n    })\r\n    .catch((error) => {\r\n      console.error('Ошибка при загрузке данных:', error);\r\n    });\r\n});\r\n\r\n// Находим формы в DOM\r\nconst formElementEditProfile = document.querySelector(\".popup__form[name='edit-profile']\");\r\nconst formElementAddCard = document.querySelector(\".popup__form[name='new-place']\");\r\nconst formElementEditAvatar = document.querySelector(\".popup__form[name='edit-avatar']\");\r\nconst avatarPopup = document.querySelector('.popup_type_avatar');\r\n\r\n// Находим поля формы в DOM\r\nconst userNameInput = document.querySelector('.popup__input_type_name');\r\nconst jobInput = document.querySelector('.popup__input_type_description');\r\nconst placeNameInput = document.querySelector('.popup__input_type_card-name');\r\nconst placeLinkInput = document.querySelector('.popup__input_type_url');\r\n\r\n//функция изменения текста на кнопке и блокировки кнопки\r\nfunction handleButtonState(submitButton, isLoading) {\r\n  if (isLoading) {\r\n    submitButton.textContent = 'Сохранение...';  // Изменяем текст на кнопке на \"Сохранение...\"\r\n    submitButton.disabled = true;  // Отключаем кнопку, чтобы избежать повторных кликов\r\n  } else {\r\n    submitButton.textContent = 'Сохранить';  // Восстанавливаем исходный текст\r\n    submitButton.disabled = false;  // Включаем кнопку обратно\r\n  }\r\n}\r\n\r\n\r\n//Обработчик открытия формы редактирования профиля и подставка дефолтных значений\r\nconst handleEditProfileDefaultValue = () => {\r\n  userNameInput.value = profileName.textContent;\r\n  jobInput.value = profileDescription.textContent;\r\n  openPopup(editPopup);\r\n  clearValidation(formElementEditProfile, validationConfig);\r\n};\r\n\r\n//Обработчик открытия формы добавления новой карточки\r\nconst handleAddCard = () => {\r\n  formElementAddCard.reset(); // сбрасываем поля\r\n  openPopup(newCardPopup);\r\n  clearValidation(formElementAddCard, validationConfig);\r\n};\r\n\r\n// Прикрепляем обработчик открытия формы к кнопке добавить новую карточку\r\naddCardButton.addEventListener('click', handleAddCard);\r\n\r\n// Прикрепляем обработчик открытия формы к кнопке редактировать профиль\r\neditButton.addEventListener(\"click\", handleEditProfileDefaultValue);\r\n\r\n// Обработчик отправки формы редактирования профиля\r\nfunction handleFormSubmitEditProfile(evt) {\r\n  evt.preventDefault();\r\n  const userJob = jobInput.value;\r\n  const userName = userNameInput.value;\r\n\r\n  const submitButton = evt.submitter; // Кнопка \"Сохранить\"\r\n  handleButtonState(submitButton, true);  // Включаем состояние загрузки\r\n\r\n  updateUserInfo(userName, userJob)\r\n    .then((data) => {\r\n      profileName.textContent = data.name;\r\n      profileDescription.textContent = data.about;\r\n      closePopup(editPopup);\r\n    })\r\n    .catch(err => {\r\n      console.error('Ошибка при обновлении профиля:', err);\r\n    }).finally(() => {\r\n      handleButtonState(submitButton, false);  // Восстанавливаем кнопку\r\n    });\r\n}\r\n\r\n// Прикрепляем обработчик отправки к кнопке \"сохранить\" формы редактирования профиля\r\nformElementEditProfile.addEventListener('submit', handleFormSubmitEditProfile);\r\n\r\n// Обработчик отправки формы добавления карточки\r\nfunction handleFormSubmitAddCard(evt) {\r\n  evt.preventDefault(); // Эта строчка отменяет стандартную отправку формы.\r\n\r\n  const submitButton = evt.submitter; // Кнопка \"Сохранить\"\r\n  handleButtonState(submitButton, true);  // Включаем состояние загрузки\r\n\r\n  const userPlaceName = placeNameInput.value;\r\n  const userPlaceUrl = placeLinkInput.value;\r\n\r\n // Отправляем данные на сервер\r\n addNewCard(userPlaceName, userPlaceUrl)\r\n .then((newCardData) => {\r\n  // Передаем currentUserId в данные карточки\r\n  newCardData.currentUserId = profileName.dataset.userId;\r\n\r\n   // Добавляем карточку на страницу\r\n   renderCard({\r\n      name: newCardData.name,\r\n      link: newCardData.link,\r\n      alt: newCardData.name,\r\n      likes: newCardData.likes,\r\n      currentUserId: newCardData.currentUserId, // Передаем currentUserId в карточку\r\n      owner: newCardData.owner,\r\n   });\r\n   \r\n   // Закрываем попап и сбрасываем форму\r\n   formElementAddCard.reset();\r\n   closePopup(newCardPopup);\r\n })\r\n .catch((error) => {\r\n   console.error('Ошибка при добавлении карточки:', error);\r\n }).finally(() => {\r\n  handleButtonState(submitButton, false);  // Восстанавливаем кнопку\r\n});\r\n}\r\n\r\n// Прикрепляем обработчик отправки к кнопке \"сохранить\" формы добавления карточки\r\nformElementAddCard.addEventListener('submit', handleFormSubmitAddCard);\r\n\r\n// Закрытие попапа по клику на оверлей\r\npopups.forEach((popup) => {\r\n  popup.addEventListener('mousedown', (evt) => {\r\n    if (evt.target === popup) {\r\n      closePopup(popup);\r\n    }\r\n  })\r\n});\r\n\r\nconst validationConfig = {\r\n  formSelector: '.popup__form',\r\n  inputSelector: '.popup__input',\r\n  submitButtonSelector: '.popup__button',\r\n  inactiveButtonClass: 'popup__button_disabled',\r\n  inputErrorClass: 'popup__input_type_error',\r\n  errorClass: 'form__input-error_active'\r\n};\r\n\r\n// Обработчик открытия попапа изменения аватара\r\nconst handleEditAvatar = () => {\r\n  formElementEditAvatar.reset(); // сбрасываем поля\r\n  openPopup(avatarPopup);\r\n  clearValidation(formElementEditAvatar, validationConfig);\r\n};\r\n\r\n// Прикрепляем обработчик открытия формы к кнопке редактировать аватар\r\nprofileAvatar.addEventListener(\"click\", handleEditAvatar);\r\n\r\n//Обработчик отправки формы изменения аватара\r\nfunction handleFormSubmitEditAvatar(evt) {\r\n  evt.preventDefault();  // отменяем стандартную отправку формы\r\n  const avatarUrl = evt.target.avatar.value;  // получаем новый URL\r\n\r\n  const submitButton = evt.submitter; // Кнопка \"Сохранить\"\r\n  handleButtonState(submitButton, true);  // Включаем состояние загрузки\r\n\r\n  updateAvatar(avatarUrl)\r\n    .then((data) => {\r\n      // обновляем аватар на странице\r\n      profileAvatar.style.backgroundImage = `url(${data.avatar})`;\r\n\r\n      // Закрываем попап и сбрасываем форму\r\n      formElementEditAvatar.reset();\r\n      closePopup(avatarPopup);\r\n    })\r\n    .catch((error) => {\r\n      console.error('Ошибка при обновлении аватара:', error);\r\n    }).finally(() => {\r\n      handleButtonState(submitButton, false);  // Восстанавливаем кнопку\r\n    });\r\n}\r\n\r\n// Обработчик отправки формы изменения аватара\r\nformElementEditAvatar.addEventListener('submit', handleFormSubmitEditAvatar);\r\n\r\nenableValidation(validationConfig);\r\n"],"names":["popups","document","querySelectorAll","openPopup","popup","classList","add","addEventListener","handleEscClose","closePopup","remove","removeEventListener","evt","key","openedPopup","querySelector","forEach","closeButton","config","baseUrl","headers","authorization","handleResponse","res","ok","json","Promise","reject","concat","status","cardTemplate","content","imagePopup","popupImage","popupCaption","handleDeleteCard","cardId","target","closest","fetch","method","then","deleteCard","data","console","log","catch","error","handleLikeClick","element","likeButton","likeCounter","contains","_id","updatedCard","textContent","likes","length","putLike","handleImageClick","src","link","alt","createCard","cardElement","cloneNode","cardImage","cardTitle","deleteButton","name","currentUserId","some","like","owner","style","display","showInputError","formElement","inputElement","errorMessage","settings","errorElement","id","inputErrorClass","errorClass","hideInputError","toggleButtonState","inputs","button","validity","valid","inactiveButtonClass","disabled","clearValidation","inputList","Array","from","inputSelector","buttonElement","submitButtonSelector","profileName","profileDescription","profileAvatar","editButton","editPopup","newCardPopup","addCardButton","placesList","all","_ref","_ref2","userData","cards","about","backgroundImage","avatar","dataset","userId","cardData","appendChild","formElementEditProfile","formElementAddCard","formElementEditAvatar","avatarPopup","userNameInput","jobInput","placeNameInput","placeLinkInput","handleButtonState","submitButton","isLoading","reset","validationConfig","value","preventDefault","userJob","userName","submitter","body","JSON","stringify","err","finally","newCardData","readyCard","prepend","formSelector","avatarUrl","updateAvatar","customError","patternMismatch","validationMessage","checkInputValidity","setEventListeners"],"sourceRoot":""}