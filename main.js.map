{"version":3,"file":"main.js","mappings":"mBACA,IAAMA,EAASC,SAASC,iBAAiB,UAGzC,SAASC,EAAUC,GACjBA,EAAMC,UAAUC,IAAI,mBACpBL,SAASM,iBAAiB,UAAWC,EACvC,CAGA,SAASC,EAAWL,GAClBA,EAAMC,UAAUK,OAAO,mBACvBT,SAASU,oBAAoB,UAAWH,EAC1C,CAGA,SAASA,EAAeI,GACtB,GAAgB,WAAZA,EAAIC,IAAkB,CACxB,IAAMC,EAAcb,SAASc,cAAc,oBACvCD,GACFL,EAAWK,EAEf,CACF,CAGAd,EAAOgB,SAAQ,SAACZ,GACd,IAAMa,EAAcb,EAAMW,cAAc,iBACpCE,GACFA,EAAYV,iBAAiB,SAAS,kBAAME,EAAWL,EAAM,GAEjE,IC9BA,IAAMc,EAAS,CACbC,QAAS,kDACTC,QAAS,CACPC,cAAe,uCACf,eAAgB,qBAKpB,SAASC,EAAeC,GACtB,OAAIA,EAAIC,GACCD,EAAIE,OAENC,QAAQC,OAAO,WAADC,OAAYL,EAAIM,QACvC,CAiBO,IC9BDC,EAAe7B,SAASc,cAAc,kBAAkBgB,QAK9D,SAASC,EAAiBpB,EAAKqB,GAC7B,IAAMC,EAActB,EAAIuB,QDiEA,SAACF,GACzB,OAAOG,MAAM,GAADR,OAAIV,EAAOC,QAAO,WAAAS,OAAUK,GAAU,CAChDI,OAAQ,SACRjB,QAASF,EAAOE,UAEfkB,KAAKhB,EACV,ECpEGiB,CAAWN,GACVK,MAAK,SAACE,GACLC,QAAQC,IAAI,8BAA+BF,GAE3CN,EAAYS,QAAQ,iBAAiBjC,QACvC,IACCkC,OAAM,SAACC,GACNJ,QAAQI,MAAM,gCAAiCA,EACjD,GACH,CAQA,SAASC,EAAgBC,EAASC,EAAYC,GDoCpB,IAAChB,EClCrBe,EAAW3C,UAAU6C,SAAS,gCDkCTjB,EChCZc,EAAQI,IDiCdf,MAAM,GAADR,OAAIV,EAAOC,QAAO,iBAAAS,OAAgBK,GAAU,CACtDI,OAAQ,SACRjB,QAASF,EAAOE,UAEfkB,KAAKhB,ICpCHgB,MAAK,SAACc,GACLJ,EAAW3C,UAAUK,OAAO,+BAC5BuC,EAAYI,YAAcD,EAAYE,MAAMC,MAC9C,IACCX,OAAM,SAACC,GAAK,OAAKJ,QAAQI,MAAM,2BAA4BA,EAAM,IDkBjD,SAACZ,GACtB,OAAOG,MAAM,GAADR,OAAIV,EAAOC,QAAO,iBAAAS,OAAgBK,GAAU,CACtDI,OAAQ,MACRjB,QAASF,EAAOE,UAEfkB,KAAKhB,EACV,CCrBIkC,CAAQT,EAAQI,KACbb,MAAK,SAACc,GACLJ,EAAW3C,UAAUC,IAAI,+BACzB2C,EAAYI,YAAcD,EAAYE,MAAMC,MAC9C,IACCX,OAAM,SAACC,GAAK,OAAKJ,QAAQI,MAAM,+BAAgCA,EAAM,GAE5E,CAGA,SAASY,EAAWV,EAASD,EAAiBd,EAAkB0B,GAC9D,IAAMC,EA3BC7B,EAAaf,cAAc,iBAAiB6C,WAAU,GA4BvDC,EAAYF,EAAY5C,cAAc,gBACtC+C,EAAYH,EAAY5C,cAAc,gBACtCgD,EAAeJ,EAAY5C,cAAc,wBACzCiC,EAAaW,EAAY5C,cAAc,sBACvCkC,EAAcU,EAAY5C,cAAc,uBA4B9C,OA1BA8C,EAAUG,IAAMjB,EAAQkB,KACxBJ,EAAUK,IAAMnB,EAAQmB,IACxBJ,EAAUT,YAAcN,EAAQoB,KAG9BlB,EAAYI,YAAcN,EAAQO,MAAQP,EAAQO,MAAMC,OAAS,EAGjER,EAAQO,OAASP,EAAQqB,eACXrB,EAAQO,MAAMe,MAAK,SAAAC,GAAI,OAAIA,EAAKnB,MAAQJ,EAAQqB,aAAa,KAE3EpB,EAAW3C,UAAUC,IAAI,+BAKzByC,EAAQwB,MAAMpB,MAAQJ,EAAQqB,cAChCL,EAAaS,MAAMC,QAAU,OAG7BV,EAAaxD,iBAAiB,SAAS,SAACK,GAAG,OAAKoB,EAAiBpB,EAAKmC,EAAQI,IAAI,IAGlFU,EAAUtD,iBAAiB,SAAS,kBAAMmD,EAAiBX,EAAQ,IACnEC,EAAWzC,iBAAiB,SAAS,kBAAMuC,EAAgBC,EAASC,EAAYC,EAAY,IAErFU,CACT,CCrFA,SAASe,EAAeC,EAAaC,EAAcC,EAAcC,GAC/D,IAAMC,EAAeJ,EAAY5D,cAAc,IAADa,OAAKgD,EAAaI,GAAE,WAClEJ,EAAavE,UAAUC,IAAIwE,EAASG,iBACpCF,EAAa1B,YAAcwB,EAC3BE,EAAa1E,UAAUC,IAAIwE,EAASI,WACtC,CAEA,SAASC,EAAeR,EAAaC,EAAcE,GACjD,IAAMC,EAAeJ,EAAY5D,cAAc,IAADa,OAAKgD,EAAaI,GAAE,WAClEJ,EAAavE,UAAUK,OAAOoE,EAASG,iBACvCF,EAAa1B,YAAc,GAC3B0B,EAAa1E,UAAUK,OAAOoE,EAASI,WACzC,CAgBA,SAASE,EAAkBC,EAAQC,EAAQR,GACjBO,EAAOhB,MAAK,SAACO,GAAY,OAAMA,EAAaW,SAASC,KAAK,KAEhFF,EAAOjF,UAAUC,IAAIwE,EAASW,qBAC9BH,EAAOI,UAAW,IAElBJ,EAAOjF,UAAUK,OAAOoE,EAASW,qBACjCH,EAAOI,UAAW,EAEtB,CAuBO,SAASC,EAAgBhB,EAAaG,GAC3C,IAAMc,EAAYC,MAAMC,KAAKnB,EAAYzE,iBAAiB4E,EAASiB,gBAC7DC,EAAgBrB,EAAY5D,cAAc+D,EAASmB,sBAEzDL,EAAU5E,SAAQ,SAAC4D,GACjBO,EAAeR,EAAaC,EAAcE,EAC5C,IAEAM,EAAkBQ,EAAWI,EAAelB,EAC9C,CCpEO,SAASoB,EAAkBC,EAAcC,GAC1CA,GACFD,EAAa9C,YAAc,gBAC3B8C,EAAaT,UAAW,IAExBS,EAAa9C,YAAc,YAC3B8C,EAAaT,UAAW,EAE5B,C,sGCDA,IAAMW,EAAcpG,SAASc,cAAc,mBACrCuF,EAAqBrG,SAASc,cAAc,yBAC5CwF,EAAgBtG,SAASc,cAAc,mBAGvCyF,EAAavG,SAASc,cAAc,yBACpC0F,EAAYxG,SAASc,cAAc,oBACnC2F,EAAezG,SAASc,cAAc,wBACtC4F,EAAgB1G,SAASc,cAAc,wBAGvC6F,EAAa3G,SAASc,cAAc,iBAGpC8F,EAAaC,EAAW/F,cAAc,iBACtCgG,EAAeD,EAAW/F,cAAc,mBACxC+F,EAAa7G,SAASc,cAAc,qBAS1Cd,SAASM,iBAAiB,oBAAoB,WAE5CmB,QAAQsF,IAAI,CJhBL5E,MAAM,GAADR,OAAIV,EAAOC,QAAO,aAAa,CACzCC,QAASF,EAAOE,UACfkB,KAAKhB,GAKDc,MAAM,GAADR,OAAIV,EAAOC,QAAO,UAAU,CACtCC,QAASF,EAAOE,UACfkB,KAAKhB,KIQLgB,MAAK,SAAA2E,GAAuB,I,IAAAC,G,EAAA,E,4CAAAD,I,s1BAArBE,EAAQD,EAAA,GAAEE,EAAKF,EAAA,GAErBb,EAAYhD,YAAc8D,EAAShD,KACnCmC,EAAmBjD,YAAc8D,EAASE,MAC1Cd,EAAc/B,MAAM8C,gBAAkB,OAAH1F,OAAUuF,EAASI,OAAM,KAC5DlB,EAAYmB,QAAQC,OAASN,EAAShE,IAGpCiE,EAAMpG,SAAQ,SAAC0G,GAEbA,EAAStD,cAAgB+C,EAAShE,IAElC,IAAMQ,EAAcF,EAAWiE,EAAU5E,EAAiBd,EAAkB0B,GAC5EkD,EAAWe,YAAYhE,EACzB,GACJ,IACCf,OAAM,SAACC,GACNJ,QAAQI,MAAM,8BAA+BA,EAC/C,GACJ,IAGA,IAAM+E,EAAyB3H,SAASc,cAAc,qCAChD8G,EAAqB5H,SAASc,cAAc,kCAC5C+G,EAAwB7H,SAASc,cAAc,oCAC/CgH,EAAc9H,SAASc,cAAc,sBAGrCiH,EAAgB/H,SAASc,cAAc,2BACvCkH,EAAWhI,SAASc,cAAc,kCAClCmH,EAAiBjI,SAASc,cAAc,gCACxCoH,EAAiBlI,SAASc,cAAc,0BAG9C,SAAS2C,EAAiBX,GACxB8D,EAAW7C,IAAMjB,EAAQkB,KACzB4C,EAAW3C,IAAMnB,EAAQmB,IACzB6C,EAAa1D,YAAcN,EAAQmB,IACnC/D,EAAU2G,EACZ,CAiBAH,EAAcpG,iBAAiB,SANT,WACpBsH,EAAmBO,QACnBjI,EAAUuG,EACZ,IAMAF,EAAWjG,iBAAiB,SAjBU,WACpCyH,EAAcK,MAAQhC,EAAYhD,YAClC4E,EAASI,MAAQ/B,EAAmBjD,YACpClD,EAAUsG,GACVd,EAAgBiC,EAAwBU,EAC1C,IAqCAV,EAAuBrH,iBAAiB,UAtBxC,SAAqCK,GACnCA,EAAI2H,iBACJ,IJpE6BpE,EAAMkD,EIoE7BmB,EAAUP,EAASI,MACnBI,EAAWT,EAAcK,MAEzBlC,EAAevF,EAAI8H,UACzBxC,EAAkBC,GAAc,IJxEHhC,EI0EdsE,EJ1EoBpB,EI0EVmB,EJzElBpG,MAAM,GAADR,OAAIV,EAAOC,QAAO,aAAa,CACzCkB,OAAQ,QACRjB,QAASF,EAAOE,QAChBuH,KAAMC,KAAKC,UAAU,CAAE1E,KAAAA,EAAMkD,MAAAA,MAE9B/E,KAAKhB,IIqEHgB,MAAK,SAACE,GACL6D,EAAYhD,YAAcb,EAAK2B,KAC/BmC,EAAmBjD,YAAcb,EAAK6E,MACtC5G,EAAWgG,EACb,IACC7D,OAAM,SAAAkG,GACLrG,QAAQI,MAAM,iCAAkCiG,EAClD,IAAGC,SAAQ,WACT7C,EAAkBC,GAAc,EAClC,GACJ,IA4CA0B,EAAmBtH,iBAAiB,UAtCpC,SAAiCK,GAC/BA,EAAI2H,iBAEJ,IJpFyBpE,EAAMF,EIoFzBkC,EAAevF,EAAI8H,UACzBxC,EAAkBC,GAAc,IJrFPhC,EIuFH+D,EAAeG,MJvFNpE,EIwFVkE,EAAeE,MJvF7BjG,MAAM,GAADR,OAAIV,EAAOC,QAAO,UAAU,CACtCkB,OAAQ,OACRjB,QAASF,EAAOE,QAChBuH,KAAMC,KAAKC,UAAU,CACnB1E,KAAMA,EACNF,KAAMA,MAGP3B,KAAKhB,IImFRgB,MAAK,SAAC0G,GA3GR,IACQC,EA4GND,EAAY5E,cAAgBiC,EAAYmB,QAAQC,OA5G1CwB,EAAYxF,EA+GN,CACRU,KAAM6E,EAAY7E,KAClBF,KAAM+E,EAAY/E,KAClBC,IAAK8E,EAAY7E,KACjBb,MAAO0F,EAAY1F,MACnBc,cAAe4E,EAAY5E,cAC3BG,MAAOyE,EAAYzE,OArHsBzB,EAAiBd,EAAkB0B,GAChFkD,EAAWsC,QAAQD,GAwHlBpB,EAAmBO,QACnBzC,EAAgBkC,EAAoBS,GACpC7H,EAAWiG,EACb,IACC9D,OAAM,SAACC,GACNJ,QAAQI,MAAM,kCAAmCA,EACnD,IAAGkG,SAAQ,WACV7C,EAAkBC,GAAc,EAClC,GACA,IAMAnG,EAAOgB,SAAQ,SAACZ,GACdA,EAAMG,iBAAiB,aAAa,SAACK,GAC/BA,EAAIuB,SAAW/B,GACjBK,EAAWL,EAEf,GACF,IAEA,IFvHiC0E,EEuH3BwD,EAAmB,CACvBa,aAAc,eACdpD,cAAe,gBACfE,qBAAsB,iBACtBR,oBAAqB,yBACrBR,gBAAiB,0BACjBC,WAAY,4BAWdqB,EAAchG,iBAAiB,SAPN,WACvBuH,EAAsBM,QACtBjI,EAAU4H,GACVpC,EAAgBmC,EAAuBQ,EACzC,IA8BAR,EAAsBvH,iBAAiB,UAxBvC,SAAoCK,GAClCA,EAAI2H,iBACJ,IAAMa,EAAYxI,EAAIuB,OAAOoF,OAAOc,MAE9BlC,EAAevF,EAAI8H,UACzBxC,EAAkBC,GAAc,GJnHN,SAACiD,GAC3B,OAAOhH,MAAM,GAADR,OAAIV,EAAOC,QAAO,oBAAoB,CAChDkB,OAAQ,QACRjB,QAASF,EAAOE,QAChBuH,KAAMC,KAAKC,UAAU,CACnBtB,OAAQ6B,MAGX9G,KAAKhB,EACR,CI4GE+H,CAAaD,GACV9G,MAAK,SAACE,GAEL+D,EAAc/B,MAAM8C,gBAAkB,OAAH1F,OAAUY,EAAK+E,OAAM,KAGxDO,EAAsBM,QACtB3H,EAAWsH,EACb,IACCnF,OAAM,SAACC,GACNJ,QAAQI,MAAM,iCAAkCA,EAClD,IAAGkG,SAAQ,WACT7C,EAAkBC,GAAc,EAClC,GACJ,IFhKiCrB,EEqKhBwD,EFpKEzC,MAAMC,KAAK7F,SAASC,iBAAiB4E,EAASqE,eACtDnI,SAAQ,SAAC2D,IAhBpB,SAA2BA,EAAaG,GACtC,IAAMc,EAAYC,MAAMC,KAAKnB,EAAYzE,iBAAiB4E,EAASiB,gBAC7DC,EAAgBrB,EAAY5D,cAAc+D,EAASmB,sBAEzDb,EAAkBQ,EAAWI,EAAelB,GAE5Cc,EAAU5E,SAAQ,SAAC4D,GACjBA,EAAarE,iBAAiB,SAAS,YAhC3C,SAA4BoE,EAAaC,EAAcE,GACrD,IAAMwE,EAAc1E,EAAa4C,QAAQ3C,aAEpCD,EAAaW,SAASC,MAOzBL,EAAeR,EAAaC,EAAcE,GANtCF,EAAaW,SAASgE,iBAAmBD,EAC3C5E,EAAeC,EAAaC,EAAc0E,EAAaxE,GAEvDJ,EAAeC,EAAaC,EAAcA,EAAa4E,kBAAmB1E,EAKhF,CAqBM2E,CAAmB9E,EAAaC,EAAcE,GAC9CM,EAAkBQ,EAAWI,EAAelB,EAC9C,GACF,GACF,CAKI4E,CAAkB/E,EAAaG,EACjC,G","sources":["webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/components/utils.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["// Найдём все попапы для закрытия по клику на оверлей или на крестик\r\nconst popups = document.querySelectorAll('.popup');\r\n\r\n// Функция открытия попапа \r\nfunction openPopup(popup) {\r\n  popup.classList.add('popup_is-opened');\r\n  document.addEventListener('keydown', handleEscClose);\r\n}\r\n\r\n// Функция закрытия попапа \r\nfunction closePopup(popup) {\r\n  popup.classList.remove('popup_is-opened');\r\n  document.removeEventListener('keydown', handleEscClose);\r\n}\r\n\r\n// Закрытие попапа по клавише Escape \r\nfunction handleEscClose(evt) {\r\n  if (evt.key === 'Escape') {\r\n    const openedPopup = document.querySelector('.popup_is-opened');\r\n    if (openedPopup) {\r\n      closePopup(openedPopup);\r\n    }\r\n  }\r\n}\r\n\r\n// Закрытие попапа по клику на крестик \r\npopups.forEach((popup) => {\r\n  const closeButton = popup.querySelector('.popup__close');\r\n  if (closeButton) {\r\n    closeButton.addEventListener('click', () => closePopup(popup));\r\n  }\r\n});\r\n\r\nexport { closePopup, openPopup, popups };","//Настройки авторизации на сервере\r\nconst config = {\r\n  baseUrl: 'https://mesto.nomoreparties.co/v1/wff-cohort-38',\r\n  headers: {\r\n    authorization: 'a4a20277-d736-49ce-b949-832b12debea2',\r\n    'Content-Type': 'application/json'\r\n  }\r\n};\r\n\r\n// Универсальный обработчик ответа\r\nfunction handleResponse(res) {\r\n  if (res.ok) {\r\n    return res.json();\r\n  }\r\n  return Promise.reject(`Ошибка: ${res.status}`);\r\n}\r\n\r\n// Получить информацию о пользователе\r\nexport function getUserInfo() {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    headers: config.headers\r\n  }).then(handleResponse);\r\n}\r\n\r\n// Получить все карточки\r\nexport function getInitialCards() {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    headers: config.headers\r\n  }).then(handleResponse);\r\n}\r\n\r\n//обновить данные пользователя\r\nexport const updateUserInfo = (name, about) => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: 'PATCH',\r\n    headers: config.headers,\r\n    body: JSON.stringify({ name, about })\r\n  })\r\n  .then(handleResponse);\r\n};\r\n\r\n//Добавить новую карточку на сервер\r\nexport const addNewCard = (name, link) => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: 'POST',\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name: name,\r\n      link: link\r\n    })\r\n  })\r\n    .then(handleResponse);\r\n};\r\n\r\n//PUT-запрос для добавления лайка\r\nexport const putLike = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: 'PUT',\r\n    headers: config.headers,\r\n  })\r\n    .then(handleResponse);\r\n};\r\n\r\n//DELETE-запрос для удаления лайка\r\nexport const deleteLike = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: 'DELETE',\r\n    headers: config.headers,\r\n  })\r\n    .then(handleResponse);\r\n};\r\n\r\n//запрос удаления карточки на сервер\r\nexport const deleteCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/${cardId}`, {\r\n    method: 'DELETE',\r\n    headers: config.headers,\r\n  })\r\n    .then(handleResponse);\r\n};\r\n\r\n//обновление аватарки\r\nexport const updateAvatar = (avatarUrl) => {\r\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n    method: 'PATCH',\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      avatar: avatarUrl\r\n    })\r\n  })\r\n  .then(handleResponse);\r\n};\r\n","import { putLike, deleteLike, deleteCard } from './api.js';  // Импортируем функции для работы с лайками\r\n\r\nconst cardTemplate = document.querySelector('#card-template').content;\r\n\r\n\r\n\r\n// Функция удаления карточки\r\nfunction handleDeleteCard(evt, cardId) {\r\n  const eventTarget = evt.target;\r\n\r\n   // Отправляем запрос на удаление карточки с сервера\r\n   deleteCard(cardId)\r\n   .then((data) => {\r\n     console.log('Карточка удалена с сервера:', data);\r\n     // Удаляем карточку из DOM только после успешного ответа удаления с сервера\r\n     eventTarget.closest('.places__item').remove();\r\n   })\r\n   .catch((error) => {\r\n     console.error('Ошибка при удалении карточки:', error);\r\n   });\r\n}\r\n\r\n// Функция копирования клонированного шаблона карточки\r\nfunction getCardTemplate() {\r\n  return cardTemplate.querySelector('.places__item').cloneNode(true);\r\n}\r\n\r\n//Функция лайка карточки\r\nfunction handleLikeClick(element, likeButton, likeCounter) {\r\n  // Если лайкнут — убираем лайк, иначе ставим лайк\r\n  if (likeButton.classList.contains('card__like-button_is-active')) {\r\n    // Убираем лайк\r\n    deleteLike(element._id)\r\n      .then((updatedCard) => {\r\n        likeButton.classList.remove('card__like-button_is-active');\r\n        likeCounter.textContent = updatedCard.likes.length;\r\n      })\r\n      .catch((error) => console.error('Ошибка при снятии лайка:', error));\r\n  } else {\r\n    // Ставим лайк\r\n    putLike(element._id)\r\n      .then((updatedCard) => {\r\n        likeButton.classList.add('card__like-button_is-active');\r\n        likeCounter.textContent = updatedCard.likes.length;\r\n      })\r\n      .catch((error) => console.error('Ошибка при добавлении лайка:', error));\r\n  }\r\n}\r\n\r\n// Функция создания карточки\r\nfunction createCard(element, handleLikeClick, handleDeleteCard, handleImageClick) {\r\n  const cardElement = getCardTemplate();\r\n  const cardImage = cardElement.querySelector('.card__image');\r\n  const cardTitle = cardElement.querySelector('.card__title');\r\n  const deleteButton = cardElement.querySelector('.card__delete-button');\r\n  const likeButton = cardElement.querySelector('.card__like-button');\r\n  const likeCounter = cardElement.querySelector('.card__like-counter');\r\n\r\n  cardImage.src = element.link;\r\n  cardImage.alt = element.alt;\r\n  cardTitle.textContent = element.name;\r\n\r\n    // Отображаем количество лайков\r\n    likeCounter.textContent = element.likes ? element.likes.length : 0;\r\n  \r\n// Подсветка лайка, если пользователь уже лайкал\r\nif (element.likes && element.currentUserId) {\r\n  const isLiked = element.likes.some(like => like._id === element.currentUserId);\r\n  if (isLiked) {\r\n    likeButton.classList.add('card__like-button_is-active');\r\n  }\r\n}\r\n\r\n// Скрываем кнопку удаления, если карточка не принадлежит текущему пользователю\r\nif (element.owner._id !== element.currentUserId) {\r\n  deleteButton.style.display = 'none';\r\n} else {\r\n  // Если это моя карточка, прикрепляем обработчик удаления\r\n  deleteButton.addEventListener('click', (evt) => handleDeleteCard(evt, element._id));\r\n}\r\n\r\n  cardImage.addEventListener('click', () => handleImageClick(element));\r\n  likeButton.addEventListener('click', () => handleLikeClick(element, likeButton, likeCounter));\r\n\r\n  return cardElement;\r\n}\r\n\r\nexport { createCard, handleLikeClick, handleDeleteCard };\r\n","function showInputError(formElement, inputElement, errorMessage, settings) {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.add(settings.inputErrorClass);\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(settings.errorClass);\r\n}\r\n\r\nfunction hideInputError(formElement, inputElement, settings) {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.remove(settings.inputErrorClass);\r\n  errorElement.textContent = '';\r\n  errorElement.classList.remove(settings.errorClass);\r\n}\r\n\r\nfunction checkInputValidity(formElement, inputElement, settings) {\r\n  const customError = inputElement.dataset.errorMessage;\r\n\r\n  if (!inputElement.validity.valid) {\r\n    if (inputElement.validity.patternMismatch && customError) {\r\n      showInputError(formElement, inputElement, customError, settings);\r\n    } else {\r\n      showInputError(formElement, inputElement, inputElement.validationMessage, settings);\r\n    }\r\n  } else {\r\n    hideInputError(formElement, inputElement, settings);\r\n  }\r\n}\r\n\r\nfunction toggleButtonState(inputs, button, settings) {\r\n  const hasInvalidInput = inputs.some((inputElement) => !inputElement.validity.valid);\r\n  if (hasInvalidInput) {\r\n    button.classList.add(settings.inactiveButtonClass);\r\n    button.disabled = true;\r\n  } else {\r\n    button.classList.remove(settings.inactiveButtonClass);\r\n    button.disabled = false;\r\n  }\r\n}\r\n\r\nfunction setEventListeners(formElement, settings) {\r\n  const inputList = Array.from(formElement.querySelectorAll(settings.inputSelector));\r\n  const buttonElement = formElement.querySelector(settings.submitButtonSelector);\r\n\r\n  toggleButtonState(inputList, buttonElement, settings);\r\n\r\n  inputList.forEach((inputElement) => {\r\n    inputElement.addEventListener('input', () => {\r\n      checkInputValidity(formElement, inputElement, settings);\r\n      toggleButtonState(inputList, buttonElement, settings);\r\n    });\r\n  });\r\n}\r\n\r\nexport function enableValidation(settings) {\r\n  const formList = Array.from(document.querySelectorAll(settings.formSelector));\r\n  formList.forEach((formElement) => {\r\n    setEventListeners(formElement, settings);\r\n  });\r\n}\r\n\r\nexport function clearValidation(formElement, settings) {\r\n  const inputList = Array.from(formElement.querySelectorAll(settings.inputSelector));\r\n  const buttonElement = formElement.querySelector(settings.submitButtonSelector);\r\n\r\n  inputList.forEach((inputElement) => {\r\n    hideInputError(formElement, inputElement, settings);\r\n  });\r\n\r\n  toggleButtonState(inputList, buttonElement, settings);\r\n}\r\n","//функция изменения текста на кнопке и блокировки кнопки\r\nexport function handleButtonState(submitButton, isLoading) {\r\n  if (isLoading) {\r\n    submitButton.textContent = 'Сохранение...';  // Изменяем текст на кнопке на \"Сохранение...\"\r\n    submitButton.disabled = true;  // Отключаем кнопку, чтобы избежать повторных кликов\r\n  } else {\r\n    submitButton.textContent = 'Сохранить';  // Восстанавливаем исходный текст\r\n    submitButton.disabled = false;  // Включаем кнопку обратно\r\n  }\r\n}","import './pages/index.css';\r\nimport { closePopup, openPopup, popups } from \"./components/modal.js\";\r\nimport { createCard, handleLikeClick, handleDeleteCard } from './components/card.js'; // импорт логики карточек\r\nimport { getUserInfo, getInitialCards, updateUserInfo, addNewCard, updateAvatar } from './components/api.js'; // импорт API-функций\r\nimport { enableValidation, clearValidation } from './components/validation.js';\r\nimport { handleButtonState } from './components/utils.js';\r\n\r\n//значения имени и занятия по дефолту в профиле\r\nconst profileName = document.querySelector(\".profile__title\");\r\nconst profileDescription = document.querySelector(\".profile__description\");\r\nconst profileAvatar = document.querySelector(\".profile__image\"); // для отображения аватара\r\n\r\n//кнопки\r\nconst editButton = document.querySelector('.profile__edit-button');\r\nconst editPopup = document.querySelector('.popup_type_edit');\r\nconst newCardPopup = document.querySelector('.popup_type_new-card');\r\nconst addCardButton = document.querySelector('.profile__add-button');\r\n\r\n//DOM элемент списка мест\r\nconst placesList = document.querySelector('.places__list');\r\n\r\n//DOM элемент попапа изображения и подписи\r\nconst popupImage = imagePopup.querySelector('.popup__image');\r\nconst popupCaption = imagePopup.querySelector('.popup__caption');\r\nconst imagePopup = document.querySelector('.popup_type_image');\r\n\r\n// Функция добавления карточки в начало\r\nfunction renderCard(dataAboutPlace) {\r\n  const readyCard = createCard(dataAboutPlace, handleLikeClick, handleDeleteCard, handleImageClick);\r\n  placesList.prepend(readyCard); // Добавляем в начало\r\n}\r\n\r\n// Загрузка информации о пользователе и карточек с сервера\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  // Загружаем данные о пользователе и карточки параллельно с использованием Promise.all\r\n  Promise.all([getUserInfo(), getInitialCards()])\r\n    .then(([userData, cards]) => {\r\n      // Обновляем DOM с полученными данными о пользователе\r\n      profileName.textContent = userData.name;\r\n      profileDescription.textContent = userData.about;\r\n      profileAvatar.style.backgroundImage = `url(${userData.avatar})`;\r\n      profileName.dataset.userId = userData._id; \r\n\r\n      // Отображаем карточки\r\n        cards.forEach((cardData) => {\r\n        // Передаем currentUserId в данные карточки\r\n          cardData.currentUserId = userData._id; // Добавляем currentUserId\r\n\r\n          const cardElement = createCard(cardData, handleLikeClick, handleDeleteCard, handleImageClick);\r\n          placesList.appendChild(cardElement);\r\n        });\r\n    })\r\n    .catch((error) => {\r\n      console.error('Ошибка при загрузке данных:', error);\r\n    });\r\n});\r\n\r\n// Находим формы в DOM\r\nconst formElementEditProfile = document.querySelector(\".popup__form[name='edit-profile']\");\r\nconst formElementAddCard = document.querySelector(\".popup__form[name='new-place']\");\r\nconst formElementEditAvatar = document.querySelector(\".popup__form[name='edit-avatar']\");\r\nconst avatarPopup = document.querySelector('.popup_type_avatar');\r\n\r\n// Находим поля формы в DOM\r\nconst userNameInput = document.querySelector('.popup__input_type_name');\r\nconst jobInput = document.querySelector('.popup__input_type_description');\r\nconst placeNameInput = document.querySelector('.popup__input_type_card-name');\r\nconst placeLinkInput = document.querySelector('.popup__input_type_url');\r\n\r\n// Функция открытия попапа изображения по клику на изображение карточки\r\nfunction handleImageClick(element) {\r\n  popupImage.src = element.link;\r\n  popupImage.alt = element.alt;\r\n  popupCaption.textContent = element.alt;\r\n  openPopup(imagePopup);\r\n}\r\n\r\n//Обработчик открытия формы редактирования профиля и подставка дефолтных значений\r\nconst handleEditProfileDefaultValue = () => {\r\n  userNameInput.value = profileName.textContent;\r\n  jobInput.value = profileDescription.textContent;\r\n  openPopup(editPopup);\r\n  clearValidation(formElementEditProfile, validationConfig);\r\n};\r\n\r\n//Обработчик открытия формы добавления новой карточки\r\nconst handleAddCard = () => {\r\n  formElementAddCard.reset(); // сбрасываем поля\r\n  openPopup(newCardPopup);\r\n};\r\n\r\n// Прикрепляем обработчик открытия формы к кнопке добавить новую карточку\r\naddCardButton.addEventListener('click', handleAddCard);\r\n\r\n// Прикрепляем обработчик открытия формы к кнопке редактировать профиль\r\neditButton.addEventListener(\"click\", handleEditProfileDefaultValue);\r\n\r\n// Обработчик отправки формы редактирования профиля\r\nfunction handleFormSubmitEditProfile(evt) {\r\n  evt.preventDefault();\r\n  const userJob = jobInput.value;\r\n  const userName = userNameInput.value;\r\n\r\n  const submitButton = evt.submitter; // Кнопка \"Сохранить\"\r\n  handleButtonState(submitButton, true);  // Включаем состояние загрузки\r\n\r\n  updateUserInfo(userName, userJob)\r\n    .then((data) => {\r\n      profileName.textContent = data.name;\r\n      profileDescription.textContent = data.about;\r\n      closePopup(editPopup);\r\n    })\r\n    .catch(err => {\r\n      console.error('Ошибка при обновлении профиля:', err);\r\n    }).finally(() => {\r\n      handleButtonState(submitButton, false);  // Восстанавливаем кнопку\r\n    });\r\n}\r\n\r\n// Прикрепляем обработчик отправки к кнопке \"сохранить\" формы редактирования профиля\r\nformElementEditProfile.addEventListener('submit', handleFormSubmitEditProfile);\r\n\r\n// Обработчик отправки формы добавления карточки\r\nfunction handleFormSubmitAddCard(evt) {\r\n  evt.preventDefault(); // Эта строчка отменяет стандартную отправку формы.\r\n\r\n  const submitButton = evt.submitter; // Кнопка \"Сохранить\"\r\n  handleButtonState(submitButton, true);  // Включаем состояние загрузки\r\n\r\n  const userPlaceName = placeNameInput.value;\r\n  const userPlaceUrl = placeLinkInput.value;\r\n\r\n // Отправляем данные на сервер\r\n addNewCard(userPlaceName, userPlaceUrl)\r\n .then((newCardData) => {\r\n  // Передаем currentUserId в данные карточки\r\n  newCardData.currentUserId = profileName.dataset.userId;\r\n\r\n   // Добавляем карточку на страницу\r\n   renderCard({\r\n      name: newCardData.name,\r\n      link: newCardData.link,\r\n      alt: newCardData.name,\r\n      likes: newCardData.likes,\r\n      currentUserId: newCardData.currentUserId, // Передаем currentUserId в карточку\r\n      owner: newCardData.owner,\r\n   });\r\n   \r\n   // Закрываем попап и сбрасываем форму\r\n   formElementAddCard.reset();\r\n   clearValidation(formElementAddCard, validationConfig);\r\n   closePopup(newCardPopup);\r\n })\r\n .catch((error) => {\r\n   console.error('Ошибка при добавлении карточки:', error);\r\n }).finally(() => {\r\n  handleButtonState(submitButton, false);  // Восстанавливаем кнопку\r\n});\r\n}\r\n\r\n// Прикрепляем обработчик отправки к кнопке \"сохранить\" формы добавления карточки\r\nformElementAddCard.addEventListener('submit', handleFormSubmitAddCard);\r\n\r\n// Закрытие попапа по клику на оверлей\r\npopups.forEach((popup) => {\r\n  popup.addEventListener('mousedown', (evt) => {\r\n    if (evt.target === popup) {\r\n      closePopup(popup);\r\n    }\r\n  })\r\n});\r\n\r\nconst validationConfig = {\r\n  formSelector: '.popup__form',\r\n  inputSelector: '.popup__input',\r\n  submitButtonSelector: '.popup__button',\r\n  inactiveButtonClass: 'popup__button_disabled',\r\n  inputErrorClass: 'popup__input_type_error',\r\n  errorClass: 'form__input-error_active'\r\n};\r\n\r\n// Обработчик открытия попапа изменения аватара\r\nconst handleEditAvatar = () => {\r\n  formElementEditAvatar.reset(); // сбрасываем поля\r\n  openPopup(avatarPopup);\r\n  clearValidation(formElementEditAvatar, validationConfig);\r\n};\r\n\r\n// Прикрепляем обработчик открытия формы к кнопке редактировать аватар\r\nprofileAvatar.addEventListener(\"click\", handleEditAvatar);\r\n\r\n//Обработчик отправки формы изменения аватара\r\nfunction handleFormSubmitEditAvatar(evt) {\r\n  evt.preventDefault();  // отменяем стандартную отправку формы\r\n  const avatarUrl = evt.target.avatar.value;  // получаем новый URL\r\n\r\n  const submitButton = evt.submitter; // Кнопка \"Сохранить\"\r\n  handleButtonState(submitButton, true);  // Включаем состояние загрузки\r\n\r\n  updateAvatar(avatarUrl)\r\n    .then((data) => {\r\n      // обновляем аватар на странице\r\n      profileAvatar.style.backgroundImage = `url(${data.avatar})`;\r\n\r\n      // Закрываем попап и сбрасываем форму\r\n      formElementEditAvatar.reset();\r\n      closePopup(avatarPopup);\r\n    })\r\n    .catch((error) => {\r\n      console.error('Ошибка при обновлении аватара:', error);\r\n    }).finally(() => {\r\n      handleButtonState(submitButton, false);  // Восстанавливаем кнопку\r\n    });\r\n}\r\n\r\n// Обработчик отправки формы изменения аватара\r\nformElementEditAvatar.addEventListener('submit', handleFormSubmitEditAvatar);\r\n\r\nenableValidation(validationConfig);\r\n"],"names":["popups","document","querySelectorAll","openPopup","popup","classList","add","addEventListener","handleEscClose","closePopup","remove","removeEventListener","evt","key","openedPopup","querySelector","forEach","closeButton","config","baseUrl","headers","authorization","handleResponse","res","ok","json","Promise","reject","concat","status","cardTemplate","content","handleDeleteCard","cardId","eventTarget","target","fetch","method","then","deleteCard","data","console","log","closest","catch","error","handleLikeClick","element","likeButton","likeCounter","contains","_id","updatedCard","textContent","likes","length","putLike","createCard","handleImageClick","cardElement","cloneNode","cardImage","cardTitle","deleteButton","src","link","alt","name","currentUserId","some","like","owner","style","display","showInputError","formElement","inputElement","errorMessage","settings","errorElement","id","inputErrorClass","errorClass","hideInputError","toggleButtonState","inputs","button","validity","valid","inactiveButtonClass","disabled","clearValidation","inputList","Array","from","inputSelector","buttonElement","submitButtonSelector","handleButtonState","submitButton","isLoading","profileName","profileDescription","profileAvatar","editButton","editPopup","newCardPopup","addCardButton","placesList","popupImage","imagePopup","popupCaption","all","_ref","_ref2","userData","cards","about","backgroundImage","avatar","dataset","userId","cardData","appendChild","formElementEditProfile","formElementAddCard","formElementEditAvatar","avatarPopup","userNameInput","jobInput","placeNameInput","placeLinkInput","reset","value","validationConfig","preventDefault","userJob","userName","submitter","body","JSON","stringify","err","finally","newCardData","readyCard","prepend","formSelector","avatarUrl","updateAvatar","customError","patternMismatch","validationMessage","checkInputValidity","setEventListeners"],"sourceRoot":""}